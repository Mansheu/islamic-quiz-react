rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && (
        // Hardcoded admin email (your email)
        request.auth.token.email == 'babakartijaniyshaykhaniy@gmail.com' ||
        // OR check admin collection (for additional admins)
        exists(/databases/$(database)/documents/admins/$(request.auth.uid))
      );
    }

    // Questions: public read, admin write
    match /questions/{questionId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Users: PUBLIC READ for leaderboard, users/admins write
    match /users/{userId} {
      allow read: if true;
      allow write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
    }

    // User bookmarks: user can manage own
    match /users/{userId}/bookmarks/{bookmarkId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Achievements: user can read/write own, admin can read/write all
    match /achievements/{userId} {
      allow read, write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
    }

    // Streaks: user can read/write own, admin can read/write all
    match /streaks/{userId} {
      allow read, write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
    }

    // Optional explicit leaderboard collection: public read; user/admin write
    match /leaderboard/{userId} {
      allow read: if true;
      allow write: if (request.auth != null && request.auth.uid == userId) || isAdmin();
    }

    // Quiz Results: PUBLIC READ for leaderboard, user writes own
    match /quizResults/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Timed Challenge Results: PUBLIC READ for challenge leaderboards
    match /timedChallengeResults/{resultId} {
      allow read: if true;
      // User can create own result; validate userId and required fields
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.keys().hasAll(['challengeId', 'score', 'grade', 'userId', 'isPersonalBest']);
      // Admin can manage all results
      allow update, delete: if isAdmin();
    }

    // Timed Challenge Profiles: user can manage own, admin can manage all
    match /timedChallengeProfiles/{userId} {
      // Keep profiles private except to owner/admin
      allow read: if (request.auth != null && request.auth.uid == userId) || isAdmin();
      allow write: if (request.auth != null && request.auth.uid == userId && request.resource.data.userId == userId) || isAdmin();
    }

    // Question Reports: users can create, admins can manage
    match /questionReports/{reportId} {
      allow create: if request.auth != null;
      allow read, update, delete: if isAdmin();
    }

    // Admins registry
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }

    // Catchâ€‘all: Admins can manage any document (incl. nested)
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}
